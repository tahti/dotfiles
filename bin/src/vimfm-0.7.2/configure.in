dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(vifm, 0.7.2)
AM_CONFIG_HEADER(config.h)


AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AM_PROG_LIBTOOL
AC_CONFIG_MACRO_DIR([m4])
AC_CHECK_HEADERS(limits.h sys/time.h unistd.h wchar.h)
AC_CHECK_FUNCS(getcwd mkdir regcomp strdup strstr)
AC_SYS_LARGEFILE
AC_FUNC_FSEEKO
AC_TYPE_OFF_T

AC_CHECK_PROG(HAVE_FILE_PROG, file, 1)
if test "x${HAVE_FILE_PROG}" = 'x1' ; then
    AC_DEFINE_UNQUOTED(HAVE_FILE_PROG, 1, [Define if file program present])
fi

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}")
  fi
else
  if test "x${datadir}" = 'x${datarootdir}'; then
    if test "x${datarootdir}" = 'x${prefix}/share'; then
      if test "x${prefix}" = "xNONE"; then
        AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}")
      else
        AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}")
      fi
    fi
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}")
  fi
fi

dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}")

dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

dnl This is for Mac OS
CFLAGS="$CFLAGS -D_DARWIN_C_SOURCE"

dnl Use 64-bit off_t type
CFLAGS="$CFLAGS -D_FILE_OFFSET_BITS=64"

dnl Use pthread library
LDFLAGS="-lpthread $LDFLAGS"

dnl AC_CHECK_LIB(XCurses, initscr)
vifm_cv_curses=/usr
AC_ARG_WITH(curses, [  --with-curses=DIR       where ncurses is installed ],
	[if test $withval != yes; then
		vifm_cv_curses=$withval
	fi
	if test x$vifm_cv_curses != x/usr; then
		LDFLAGS="-L${abook_cv_curses}/lib $LDFLAGS"
		CPPFLAGS="$CPPFLAGS -I${vifm_cv_curses}/include"
	fi])

AC_CHECK_LIB(ncursesw, initscr,
	[LIBS="$LIBS -lncursesw"
	if test x$vifm_cv_curses = x/usr -a -d /usr/include/ncursesw; then
		CPPFLAGS="$CPPFLAGS -I/usr/include/ncursesw"
	fi
	AC_CHECK_HEADERS(ncurses.h)],
	[AC_MSG_ERROR([libncursesw not found])])
	#[ac_widec_possible=no
	#AC_CHECK_LIB(ncurses, initscr,
		#[LIBS="$LIBS -lncurses"
		#if test x$vifm_cv_curses = x/usr -a -d /usr/include/ncurses; then
			#CPPFLAGS="$CPPFLAGS -I/usr/include/ncurses"
		#fi
		#AC_CHECK_HEADERS(ncurses.h)],
		#[CF_CURSES_LIBS])
	#])
LIBS=$LIBS $GUI_LINK_OPTS_TERM

dnl ----------------------------------------------------------------------------
dnl checks for external libraries
dnl ----------------------------------------------------------------------------

AC_ARG_WITH(gtk,
	AS_HELP_STRING([--with-gtk],
		[use GTK+ to determine mimetypes if available @<:@default=yes@:>@]),
	[use_gtk=$withval],
	[use_gtk=yes])

AC_ARG_WITH(libmagic,
	AS_HELP_STRING([--with-libmagic],
		[use libmagic to determine mimetypes if available @<:@default=yes@:>@]),
	[use_libmagic=$withval],
	[use_libmagic=yes])

AC_CHECK_LIB(X11, XOpenDisplay,
	[LIBS="$LIBS -lX11"
	AC_CHECK_HEADERS(X11/Xlib.h)
	AC_CHECK_HEADERS(X11/Xutil.h)
	AC_DEFINE([HAVE_X11], [1], [use X11 to determine terminal emulator title])])

dnl ----------------------------------------------------------------------------
dnl checks for mimetype detection
dnl ----------------------------------------------------------------------------

if test "$use_gtk" = "yes"; then
	if pkg-config --exists glib-2.0 gtk+-2.0; then
		CFLAGS="$CFLAGS $(pkg-config --cflags glib-2.0 gtk+-2.0)"
		LIBS="$LIBS $(pkg-config --libs glib-2.0 gtk+-2.0)"
		AC_DEFINE([HAVE_LIBGTK], [1], [use gtk to determine mime type])
	fi
fi

if test "$use_libmagic" = "yes"; then
	AC_CHECK_LIB(magic, magic_open)
fi

dnl ----------------------------------------------------------------------------
dnl handle options
dnl ----------------------------------------------------------------------------

AC_ARG_ENABLE(extended_keys,
	AS_HELP_STRING(
		[--disable-extended-keys],
		[disable extended keys (like arrows, home etc.). Without it will be no
		 delay after pressing escape @<:@default=enabled@:>@     ]),
	[extended_keys=$enableval],
	[extended_keys=yes])

AC_ARG_ENABLE(compatibility_mode,
	AS_HELP_STRING(
		[--disable-compatibility-mode],
		[disable compatibility with previous versions of vifm (behaviour of dd
		 and <tab>) @<:@default=enabled@:>@     ]),
	[compatibility_mode=$enableval],
	[compatibility_mode=yes])

if test "$extended_keys" = "yes"; then
	AC_DEFINE([ENABLE_EXTENDED_KEYS], [1], [enables extended keys (arrows etc.)])
fi

if test "$compatibility_mode" = "yes"; then
	AC_DEFINE([ENABLE_COMPATIBILITY_MODE], [1], [old behaviour of dd and <tab>])
fi

AC_OUTPUT([
Makefile
src/Makefile
])

